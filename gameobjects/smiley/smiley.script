go.property("smiley_id", 0)
go.property("trigger_current", 0) -- 0 = random, else set id of current active smiley

function init(self)
	local smiley_id = ""
	if self.trigger_current == 0 then
		-- get random index of id table
		local index = math.random(tablelength(global_smiley_ids))
		smiley_id = global_smiley_ids[ index ]
	else
		smiley_id = global_level_smileys[ global_next_smiley_id ]
		print("Spawning current smiley needed")
	end
	-- set new sprite image
	msg.post("#sprite", "play_animation", {id = hash("emoji_u1f" .. smiley_id ) } )
	self.smiley_id = hash(smiley_id)	

	-- movement
	_init_movement(self)
end

function final(self)
	global_smiley_count = global_smiley_count - 1
end

function update(self, dt)
	if not global_stopped then
		_move(self, dt)
		_check_pos(self)
	else
		go.delete()
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		msg.post("main", "smiley_touched", {smiley_id = hash(self.smiley_id)})
		go.delete()
	end
end

function _init_movement(self)
	self.v_speed = vmath.vector3()
	self.direction = vmath.vector3()
	self.speed = global_level_speed
	
	local pos = go.get_position()
	self.direction.x = pos.x <= 0 and 1 or -1
	self.v_speed = self.speed * self.direction
end

function _move(self, dt)
	local pos = go.get_position()
	pos = pos + self.v_speed * dt
	go.set_position(pos)
end

function _check_pos(self)
	if (self.direction.x == 1) and (go.get_position().x > global_constants.SCREEN_WIDTH) then
		go.delete()
	end

	if (self.direction.x == -1) and (go.get_position().x < 0) then
		go.delete()
	end
end

-- HELPER --

-- get the size of a table
function tablelength(T)
	local count = 0
	for _ in pairs(T) do count = count + 1 end
	return count
end