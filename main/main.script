-- reference to modules
g_constants = require "main.constants"
g_helper = require "main.helper"

-- GLOBAL PROPERTIES --
g_display_scale = 1.0
g_show_ads = g_constants.SHOW_ADS
g_sound_active = true
-- stopped when in main menu, gameover or level-complete screen
g_stopped = false
-- completed when level finished and in level-complete screen
g_completed = false
-- when in pause mode
g_pause = false
-- highest level achieved (loading from save-file)
g_highscore_level = 0
-- current level playing
g_level = 1
-- level where game begins after restart
g_start_level = 1
-- current amount of lifes
g_lifes = g_constants.MAX_LIFES
-- modes to chose from for initializing levels
g_modes = {horizontal = 1, vertical = 2, popup = 3}
-- current active mode
g_mode_active = 1
-- global amount of stars (loading from save-file)
g_stars = 0
-- amount of stars collected in current game
g_stars_of_game = 0
-- swap key and value of item table, to get index as value
g_item_table_ids = {} -- initialize in init function
-- setting when game is restarted after gamover for paying with Stars (it is allowed to restart only once)
g_restarted = false
g_restarted_level = 1
-- counts the amount of games played (to show an Ad after a cetain amount)
g_reset_counter = 1
g_show_ad_gameover = false
g_next_smiley_id = 1
-- gamestates
g_game_over = false
g_main_menu = true
-- statistics (loading from save-file)
g_games_played = 0

-- for initializing level --
g_level_smiley_count_max = 3
g_stage_smileys = {}
g_level_smileys_all = {}
g_level_smileys = {}
g_level_smileys_max = g_constants.LEVEL_SMILEYS_BASE
g_speed_horizontal = 0
g_speed_vertical = 0
g_popup_time = 0
g_popup_time_base = 2.4
-- increasing amount of smileys 
local smileys_increase_step = 1
-- spawn times
local level_spawn_time_base = 0.0
local level_spawn_time_min = 0.2
local level_spawn_time = 0.0
local level_spawn_time_vertical = 0.5
local level_spawn_time_horizontal = 0.5
local level_spawn_time_popup = 0.7
local level_spawn_time_decrease_step = 0.06
-- mode: horitontal
local speed_horizontal_initial = 250
local speed_horizontal_max = 700
local horizontal_speed_up_factor = 17
-- mode: vertical
local speed_vertical_initial = 220
local speed_vertical_max = 670
local vertical_speed_up_factor = 15
-- mode: popup
local popup_time_decrease_factor = 0.03
local popup_time_min = 1.0
local popup_spawn_increase_factor = 0.002
-- mode: rotating
local lvl_begin_rotation = 5
local rotating_speed_decrease = 100
local rotating_spawntime_increase = 0.1

-- METHODS --

-- pause game when window loses focus
local function window_listener(self, event, data)
	if event == window.WINDOW_EVENT_FOCUS_LOST then
		if not g_stopped and not g_pause then
			print("Window lost focus. Pausing game.")
			msg.post("main#gui", "toggle_pause")
		end
	end
end

-- load savegame and write properties to global variables
local function _load_savegame() 
	-- load file
	local file_path = sys.get_save_file("Tapmoji", "save")
	-- get settings
	g_stars = sys.load(file_path).stars or 0
	g_games_played = sys.load(file_path).games_played or 0
	g_reset_counter = sys.load(file_path).reset_counter or 0
	g_highscore_level = sys.load(file_path).highscore_level or 0
	sound_active = sys.load(file_path).sound_active or 0
	-- convert sound_active property to boolean value
	g_sound_active = false
	if sound_active == 1 then g_sound_active = true end

	if g_games_played == 0 then g_sound_active = true end
	
	-- debug
	print("-- Loaded savegame: ")
	print("Stars: " .. g_stars)
	print("Games played: " .. g_games_played)
	print("Reset Counter: " .. g_reset_counter)
	print("Highscore level: " ..g_highscore_level)
	print("Sound active: " .. tostring(g_sound_active))
	print("--")
end

-- write properties into table and save to file 
function save_game()
	-- convert g_sound_active from boolean to number
	local sound = 0
	if g_sound_active then sound = 1 end
	-- fill table with settings
	local save_table = {
		stars = g_stars, 
		games_played = g_games_played, 
		reset_counter = g_reset_counter, 
		sound_active = sound,
		highscore_level = g_highscore_level
	}
	-- save file
	local file_path = sys.get_save_file("Tapmoji", "save")
	if not sys.save(file_path, save_table) then
		print("Couldn't save progress!")
	else
		print("Saved game")
	end
end

-- sets a random background
local function _set_background()
	--local background_prefix = "background_ingame_"
	--local background_nr = math.random(g_constants.BACKGROUND_COUNT)
	--msg.post("main#sprite_background", "play_animation", {id = hash(background_prefix .. tostring(background_nr))})
	--go.set("#sprite_background", "scale", vmath.vector3(g_display_scale))
	--go.set("#sprite_background", "position.x", 0)
	--go.set("#sprite_background", "position.y", 0)
end

local function _init_moving_mode(self)
	-- Methods for increasing difficulty:
	-- 	shwoing more smileys simultaneously: decrease g_level_spawn_time 
	-- 	decrease time  of showing each smiley: decrease g_speed_horizontal, g_speed_vertical, g_popup_time
	-- 	spawn more different smileys at one level (reduces propability of spawning the needed smiley): increase g_level_smileys_max
	
	-- set moving mode
	g_mode_active = math.random(3)
	print("Mode: " .. g_mode_active)
	
	-- set rotation
	local rotate = 0
	if g_level > lvl_begin_rotation and (math.random(2) == 1) then
		rotate = 1
	end
	print("Rotate: " .. rotate)
	
	-- set spawning time and moving speed according to active game mode and level
	-- If smileys are rotating, then slow down speed a bit
	if g_mode_active == g_modes.horizontal then
		level_spawn_time_base = level_spawn_time_horizontal
		g_speed_horizontal = speed_horizontal_initial + (g_level * horizontal_speed_up_factor)
		if g_speed_horizontal > speed_horizontal_max then g_speed_horizontal = speed_horizontal_max end
		if rotate == 1 then g_speed_horizontal = g_speed_horizontal - rotating_speed_decrease end
		
	elseif g_mode_active == g_modes.vertical then
		level_spawn_time_base = level_spawn_time_vertical
		g_speed_vertical = speed_vertical_initial + (g_level * vertical_speed_up_factor)
		if g_speed_vertical > speed_vertical_max then g_speed_vertical = speed_vertical_max end
		if rotate == 1 then g_speed_vertical = g_speed_vertical - rotating_speed_decrease end
		
	elseif g_mode_active == g_modes.popup then
		level_spawn_time_base = level_spawn_time_popup - (g_level * popup_spawn_increase_factor) 
		g_popup_time = g_popup_time_base - (g_level * popup_time_decrease_factor)
		if g_popup_time <= popup_time_min then g_popup_time = popup_time_min end
	end

	-- If smileys are rotating, then slow down spawning a bit
	if rotate == 1 then
		level_spawn_time_base = level_spawn_time_base + rotating_spawntime_increase
	end

	-- faster spawning every 5 level
	level_spawn_time = level_spawn_time_base - (math.floor(g_level / 5) * level_spawn_time_decrease_step)
	

	if level_spawn_time < level_spawn_time_min then level_spawn_time = level_spawn_time_min end

	-- increase amount of different smileys every 5 level
	g_level_smileys_max = g_constants.LEVEL_SMILEYS_BASE + (math.floor(g_level / 5) * smileys_increase_step)
	print("g_level_smileys_max: " ..g_level_smileys_max) 

	--debug
	print("level_spawn_time: " .. level_spawn_time)
	print("g_speed_horizontal: " .. g_speed_horizontal)
	print("g_speed_vertical: " .. g_speed_vertical)
	print("g_popup_time: " .. g_popup_time)
		
	-- send defined spawn_time and rotate-flag to smiley factory
	msg.post("/smiley_factory", "init_spawn_values", {spawn_time = level_spawn_time, rotating = rotate})
end

local function _init_level(self, smiley_count)
	print("Level: " .. g_level)

	_set_background()
	
	_init_moving_mode(self)
	
	-- set stage smileys
	print ("Loading stage...")
	-- todo: add basic and unlocked smileys to stage
	g_stage_smileys = g_constants.SMILEY_IDS
	
	-- set all level smileys
	print ("Generating level smileys...")
	g_level_smileys_all = {}
	for i = 1, g_level_smileys_max do
		local rand_type = 0
		repeat 
			-- get random index of stage smileys
			rand_type = math.random(tablelength(g_stage_smileys))
			-- check if smiley type already chosen.
			-- if this is the case, pick another rand_type
		until ( not tablecontains(g_level_smileys_all, g_stage_smileys[ rand_type ] ))
			
		-- add to level
		g_level_smileys_all[i] = g_stage_smileys[ rand_type ]
		print(g_level_smileys_all[i]) --debug
	end
	
	print ("Generating level smileys to pick...")
	g_level_smileys = {}
	for i = 1, smiley_count do
		-- get random index of id table
		local rand_type = math.random(tablelength(g_level_smileys_all))		
		-- add to level
		g_level_smileys[i] = g_level_smileys_all[ rand_type ]
		-- print(g_level_smileys[i]) --debug
	end
	print ("Generating level done.")
	
	-- set smileys on gui
	msg.post("/main#gui", "set_smileys", {
		smiley0 = g_level_smileys[1],
		smiley1 = g_level_smileys[2],
		smiley2 = g_level_smileys[3],
	})
	-- set first smiley index
	g_next_smiley_id = 1
	-- scale first smiley up
	msg.post("/main#gui", "activate_smiley", {nr = 1})
	-- set level text
	msg.post("/main#gui", "set_level", {level = g_level})
	-- set lifes
	msg.post("/main#gui", "update_lifes", {lifes = g_lifes})
end

-- showing dialog "level complete", hiding ingame gui, increasing level, increasing time
local function _on_level_complete(self)
	if g_lifes > 0 then
		print("Level finished!")
		-- increase level
		g_level = g_level + 1
		-- add seconds to timer
		self.level_timer = self.level_timer + g_constants.ADDITIONAL_TIME
		-- update gui time
		msg.post("/main#gui", "set_time", {time = self.level_timer, scale = 0})
		-- hide ingame gui
		msg.post("/main#gui", "show_ingame_gui", {show = false})
		-- show "level complete"
		msg.post("/main#gui", "show_dialog_level_complete", {show = true})
		-- set game state flags
		g_stopped = true
		g_completed = true
		-- play sound
		play_sound_complete()
	end
	--else level complete, but lifes = 0 (right and wrong smiley were touched simultaneously) -> game over

	print_values(self) --debug
end

-- adds a certain amount of stars to actual game
local function _add_stars_amount(amount)
	print("Got Stars: " .. amount)
	g_stars_of_game = g_stars_of_game + amount
	g_stars = g_stars + g_stars_of_game
end

-- Adds stars after gameover. 
-- For each level the amount according to the level number.
local function _add_stars_game_finished()
	local amount = 0
	-- add stars for each level (1 star for level 1; 2 stars for level 2, ...)
	for var = g_restarted_level, g_level - 1, 1 do
		amount = amount + var
	end
	_add_stars_amount(amount)
end

function _process_game_over(self)
	-- hide gui and show/update game over screen
	msg.post("/main#gui", "show_ingame_gui", {show = false})
	msg.post("/main#gui", "show_dialog_gameover", {show = true})
	-- set gamestate
	g_stopped = true
	g_game_over = true
	-- add rewarding stars
	_add_stars_game_finished()
	-- increase games counter
	if g_level > 1 then 
		g_games_played = g_games_played + 1
	end
	-- set new highscore
	if g_level > g_highscore_level then
		g_highscore_level = g_level
	end

	save_game()

	print_values(self) --debug
end

-- adds hearts to current game, and updates gui
-- if hearts <= 0 then game over
local function _increase_lifes(self, amount)
	g_lifes = g_lifes + amount
	msg.post("/main#gui", "update_lifes", {lifes = g_lifes})
	if g_lifes < 1 then 
		_process_game_over(self) 
	elseif g_lifes > g_constants.MAX_LIFES then
		g_lifes = g_constants.MAX_LIFES
	end
	print("lifes: " ..  g_lifes)
end

-- set focus on next smiley (scale up), when the right smiley was touched
-- if the last one was touched, then level is finished
local function _set_next_smiley(self, max_smileys)
	--activate next smiley
	if g_next_smiley_id < max_smileys  then
		g_next_smiley_id = g_next_smiley_id + 1
		msg.post("/main#gui", "activate_smiley", {nr = g_next_smiley_id})
	else
		_on_level_complete(self)
	end
	-- reset smiley factory timer
	msg.post("/smiley_factory", "reset_timer", {reset = true})
end

-- check which item was touched and trigger an action
local function _touch_item(self, smiley_id, sender)
	local touched = true
	local item_index = g_item_table_ids[ smiley_id ]
	
	-- heart item
	if item_index == g_constants.EMOJI_HEART_ID then
		_increase_lifes(self, 1)
		
	-- joker item
	elseif item_index == g_constants.EMOJI_JOKER_ID then
		-- set next smiley to touch
		_set_next_smiley(self, g_level_smiley_count_max)
		
	-- clock item
	elseif item_index == g_constants.EMOJI_TIME_ID then
		-- add seconds to timer
		self.level_timer = self.level_timer + g_constants.TIME_ITEM_VALUE
		msg.post("/main#gui", "set_time", {time = self.level_timer, scale = 1})
		
	-- star item
	elseif item_index == g_constants.EMOJI_STAR_ID then
		_add_stars_amount(1)

	elseif item_index == nil then
		-- smiley_id doesn't exisit in g_item_table_ids
		touched = false
	end

	if touched then 
		-- emit particles
		msg.post(sender, "smiley_touch_success", {success = true})
		-- play sound
		play_sound_touched_item()
	end

	return touched
end

-- check if the right/wrong smiley or an item was touched 
local function _process_smiley_touch(self, smiley_id, sender)
	print("touched id: "..smiley_id)
	
	-- check if smiley is in table of level smileys
	if smiley_id == hash(g_level_smileys[ g_next_smiley_id ]) then
		play_sound_touched_smiley()
		-- emit particles
		msg.post(sender, "smiley_touch_success", {success = true})
		-- set next smiley to touch
		_set_next_smiley(self, g_level_smiley_count_max)	
	-- else check if item was touched
	elseif not _touch_item(self, smiley_id, sender) then
		-- wrong smiley touched, show feedback at gui
		msg.post("/main#gui", "feedback_wrong_smiley", {})
		-- punish player
		_increase_lifes(self, -1)
		play_sound_touched_smiley()
		play_sound_fail()
	end
end

-- initializing and starting the next level, updating ingame gui
local function _start_next_level(self)
	-- could happen that lifes < 1 when wrong and right 
	-- smiley were touched simultaneously
	if g_lifes < 1 then
		_increase_lifes(self, 1)
	end
	-- show gui and update time
	msg.post("main#gui", "show_ingame_gui", {show = true})
	msg.post("main#gui", "set_time", {time = self.level_timer, scale = 1})

	_init_level(self, g_level_smiley_count_max)

	-- set gamestate flags
	g_completed = false
	g_stopped = false
end

-- reset all gameplay properties to initial values
local function _reset(self)
	g_score = 0
	g_lifes = g_constants.MAX_LIFES
	g_level = g_start_level
	g_restarted_level = 1
	g_stars_of_game = 0
	self.level_timer = g_constants.LEVEL_TIME	
	g_restarted = false
	g_game_over = false
	g_completed = false
end

-- restarting game from the last level before game over
local function _restart_from_current_level(self)
	-- paying with stars to restart
	g_stars = g_stars - g_constants.CONTINUE_STARS
	-- saving new amount of stars
	save_game()
	-- saving last level before resetting game
	local lvl = g_level
	_reset(self)
	-- set timer
	self.level_timer = g_constants.LEVEL_TIME_RESTART	
	-- restore level
	g_level = lvl
	g_restarted_level = lvl
	-- saving restarted flag, so that game cannot be restarted more than once
	g_restarted = true
	_start_next_level(self)
end

-- starting new round from level 1
-- resetting values, showing gameplay gui
local function _restart(self)
	_reset(self)
	-- showing and updating ingame gui
	msg.post("main#gui", "show_ingame_gui", {show = true})
	msg.post("main#gui", "set_time", {time = self.level_timer, scale = 1})
	-- start from first level
	_init_level(self, g_level_smiley_count_max)
	g_stopped = false
end

------ INIT ------------------------

function init(self)
	window.set_listener(window_listener)

	-- set scaling factor, if rendering resolution in game.project is other than in constants.lua
	g_display_scale = tonumber(sys.get_config("display.height")) / g_constants.SCREEN_HEIGHT
	print("scale: " .. g_display_scale)
	
	-- load savegame
	_load_savegame()

	-- don't start until start button was touched
	g_stopped = true

	-- init random numbers
	math.randomseed(os.time())
	math.random(); math.random(); math.random(); math.random(); math.random();
	-- init random numbers (https://forum.defold.com/t/lua-math-random-problem/19372)

	-- set timer to initial value
	self.level_timer = g_constants.LEVEL_TIME
	g_level_smiley_count_max = 3
	self.second = 0.0

	g_item_table_ids = get_table_ids( g_constants.ITEM_IDS )

	-- show main menu
	msg.post("/main#gui", "show_dialog_main_menu", {show = true})
end

------ ON_MESSAGE ------------------------

function on_message(self, message_id, message, sender)
	if message_id == hash("smiley_touched") then
		_process_smiley_touch(self, message.smiley_id, sender)
	elseif message_id == hash("restart") then
		_restart(self)
	elseif message_id == hash("reset") then
		_reset(self)
	elseif message_id == hash("next_level") then
		_start_next_level(self)
	elseif message_id == hash("continue_level") then
		if not g_restarted and g_stars >= g_constants.CONTINUE_STARS then
			_restart_from_current_level(self)
		end
	end
end

------ UPDATE ------------------------

function update(self, dt)
	if not g_stopped and not g_pause then
		self.level_timer = self.level_timer - dt
		self.level_timer = math.max(self.level_timer, 0)
		self.second = self.second + dt 
		if self.second >= 1.0 then
			self.second = 0.0
			-- show current time at gui
			local scale_up = 0
			if self.level_timer <= 10 then scale_up = 1 end
			msg.post("/main#gui", "set_time", {time = self.level_timer, scale = scale_up})
		end
		-- if time runs out trigger game over
		if self.level_timer <= 0 then
			self.level_timer = 0
			_process_game_over(self)
		end
	end
end

------ HELPER ------------------------

-- counts the amount of clicks on the "back to menu" button
-- triggers showing an interstitial ad when amount = g_constants.MAX_RESETS
function increase_reset_counter()
	g_reset_counter = g_reset_counter + 1
	if g_reset_counter >= g_constants.MAX_RESETS then 
		g_reset_counter = 0
		g_show_ad_gameover = true
	end
	save_game()
end

function print_values(self)
	print(" ----------------------" )
	print("Level: " .. g_level)
	print("Lifes: " .. g_lifes)
	print("Time remaining: " .. self.level_timer)
	print("Stars of game: " .. g_stars_of_game)
	print("Gameover: " .. tostring(g_game_over))
	print("Completed: " .. tostring(g_completed))
	print("Stopped: " .. tostring(g_stopped))
	print("Main Menu: " .. tostring(g_main_menu))
	print(" ----------------------" )
end